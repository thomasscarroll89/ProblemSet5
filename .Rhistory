col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=c(min(c(first.draw$voter.position.data[,1], first.draw$party.position[,1])),
max(c(first.draw$voter.position.data[,1], first.draw$party.position[,1]))),
ylim=c(min(c(first.draw$voter.position.data[,2], first.draw$party.position[,2])),
max(c(first.draw$voter.position.data[,2], first.draw$party.position[,2]))))
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.25)
}
visualizing(n=1000, option=1)
visualizing <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
first.draw <- affiliation(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=c(min(c(first.draw$voter.position.data[,1], first.draw$party.position[,1])),
max(c(first.draw$voter.position.data[,1], first.draw$party.position[,1]))),
ylim=c(min(c(first.draw$voter.position.data[,2], first.draw$party.position[,2])),
max(c(first.draw$voter.position.data[,2], first.draw$party.position[,2]))))
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
}
visualizing(n=1000, option=1)
visualizing(n=1000, option=2)
visualizing(n=1000, option=3)
visualizing(n=1000, option=4)
visualizing(n=1000, option=5)
visualizing(n=1000, option=3)
visualizing <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
first.draw <- affiliation(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=c(min(c(first.draw$voter.position.data[,1], first.draw$party.position[,1])),
max(c(first.draw$voter.position.data[,1], first.draw$party.position[,1]))),
ylim=c(min(c(first.draw$voter.position.data[,2], first.draw$party.position[,2])),
max(c(first.draw$voter.position.data[,2], first.draw$party.position[,2]))))
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
return(first.draw)
}
visualizing(n=1000, option=1)
visualizing(n=1000, option=5)
draw <- visualizing(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
draw <- visualizing(n=1000, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2))
draw$voter.preferences.data
draw$voter.positions.data
draw
draw[[1]]
head(draw[[1]])
head(draw)
draw$voter.position.data
draw$voter.position.data[which(draw$voter.position.data$affiliation==1),]
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),1])
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),2])
affiliation2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2){
outcome <- vector("list")
#Generate the voters' and parties' positions
voter.position <-  voters(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)  #run the voters function from Problems 1-2 above to generate some random initial voter preferences
party.position <- rbind(party.1, party.2)
#Calculate a vector showing each individual's total distance from party 1; call it distance.1
distance.temp.1.1 <- voter.position[,1] - party.1[1]
distance.temp.1.2 <- voter.position[,2] - party.1[2]
distance.temp.1 <- cbind(distance.temp.1.1, distance.temp.1.2)^2 #matrix; first column is a^2, second column is b^2
distance.1 <- sqrt(apply(distance.temp.1, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
#Next calculate a vector showing each individual's total distance from party 2; call it distance.2
distance.temp.2.1 <- voter.position[,1] - party.2[1]
distance.temp.2.2 <- voter.position[,2] - party.2[2]
distance.temp.2 <- cbind(distance.temp.2.1, distance.temp.2.2)^2 #matrix; first column is a^2, second column is b^2
distance.2 <- sqrt(apply(distance.temp.2, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
final.distance <- distance.1 - distance.2
voter.position <- data.frame(voter.position)
voter.position$final.distance <- final.distance
voter.position$affiliation <- ifelse(final.distance > 0, "2", "1")
#create affiliation variable. Coded as "2" if voter is closer to party 2, and "1" otherwise
outcome$voter.position.data <- voter.position
outcome$party.positions <- party.position
return(outcome)
}
rm(draw)
affiliation2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2){
outcome <- vector("list")
#Generate the voters' and parties' positions
voter.position <-  voters(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)  #run the voters function from Problems 1-2 above to generate some random initial voter preferences
party.position <- rbind(party.1, party.2)
#Calculate a vector showing each individual's total distance from party 1; call it distance.1
distance.temp.1.1 <- voter.position[,1] - party.1[1]
distance.temp.1.2 <- voter.position[,2] - party.1[2]
distance.temp.1 <- cbind(distance.temp.1.1, distance.temp.1.2)^2 #matrix; first column is a^2, second column is b^2
distance.1 <- sqrt(apply(distance.temp.1, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
#Next calculate a vector showing each individual's total distance from party 2; call it distance.2
distance.temp.2.1 <- voter.position[,1] - party.2[1]
distance.temp.2.2 <- voter.position[,2] - party.2[2]
distance.temp.2 <- cbind(distance.temp.2.1, distance.temp.2.2)^2 #matrix; first column is a^2, second column is b^2
distance.2 <- sqrt(apply(distance.temp.2, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
final.distance <- distance.1 - distance.2
voter.position <- data.frame(voter.position)
voter.position$final.distance <- final.distance
voter.position$affiliation <- ifelse(final.distance > 0, "2", "1")
#create affiliation variable. Coded as "2" if voter is closer to party 2, and "1" otherwise
outcome$voter.position.data <- voter.position
outcome$party.positions <- party.position
return(outcome)
}
#Likewise the visualizing2 function is the same as visualizing except it can also take user-defined arguments for the positions taken by the parties;
#it uses these user-defined positions in the affiliation2 function defined above.
visualizing2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2){
first.draw <- affiliation2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1, party.2=party.2)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=c(min(c(first.draw$voter.position.data[,1], first.draw$party.position[,1])),
max(c(first.draw$voter.position.data[,1], first.draw$party.position[,1]))),
ylim=c(min(c(first.draw$voter.position.data[,2], first.draw$party.position[,2])),
max(c(first.draw$voter.position.data[,2], first.draw$party.position[,2]))))
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
return(first.draw)
}
visualizing(n=1000, option=1)
print(visualizing(n=1000, option=1))
test <- visualizing(n=1000, option=1)
test <- visualizing(n=1000, option=1)
master <- function(sims=10, n=1000, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
draw <- visualizing(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
for(i in 2:sims){
party.1.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),2]))
party.2.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),2]))
draw <- visualizing2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1.new, party.2=party.2.new)
}
}
master()
x11()
master()
master()
x11(record=TRUE)
windows(record=TRUE)
master()
windows(record=TRUE)
windows(record=TRUE)
dev.set()
graphics.off()
windows(record=TRUE)
ls()
windows(record=TRUE, rescale="")
voters <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
if (option==1){
voter <- matrix(rnorm(n*2), nrow=n, ncol=2)
return(voter)
}
if (option==2){
voter <- matrix(c(rnorm(n, mean=0, sd=sig1), rnorm(n, mean=0, sd=sig2)),
nrow=n, ncol=2)
return(voter)
}
if (option==3){
voter <- matrix(runif(n*2), nrow=n, ncol=2)
return(voter)
}
if (option==4){
voter <- matrix(mvrnorm(n, mu=c(0,0), Sigma=Sigma),nrow=n, ncol=2)
return(voter)
}
if (option==5){
mvr.1 <- mvrnorm(n, mu=c(0,0), Sigma=Sigma)
mvr.2 <- mvrnorm(n, mu=runif(2), Sigma=Sigma+runif(1))
mvr.3 <- mvrnorm(n, mu=runif(2), Sigma=Sigma+runif(1))
total <- rbind(mvr.1, mvr.2, mvr.3)
voter <- total[sample(1:(3*n), size=n),]
return(voter)
}
}
####Problem 3: Function such that voters affiliate with the closest of the two parties####
#The affiliation function takes the same arguments as the voters function above; thus when running affiliation, you can
#decide which kind of distribution will be used to generate voter preferences, etc.
affiliation <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
outcome <- vector("list")
#Generate the voters' and parties' positions
voter.position <-  voters(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)  #run the voters function from Problems 1-2 above to generate some random initial voter preferences
party.1 <- rnorm(2) #the original positions taken by Party 1 on two dimensions
party.2 <- rnorm(2) #the original positions taken by Party 2 on two dimensions
party.position <- rbind(party.1, party.2)
#Calculate a vector showing each individual's total distance from party 1; call it distance.1
distance.temp.1.1 <- voter.position[,1] - party.1[1]
distance.temp.1.2 <- voter.position[,2] - party.1[2]
distance.temp.1 <- cbind(distance.temp.1.1, distance.temp.1.2)^2 #matrix; first column is a^2, second column is b^2
distance.1 <- sqrt(apply(distance.temp.1, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
#Next calculate a vector showing each individual's total distance from party 2; call it distance.2
distance.temp.2.1 <- voter.position[,1] - party.2[1]
distance.temp.2.2 <- voter.position[,2] - party.2[2]
distance.temp.2 <- cbind(distance.temp.2.1, distance.temp.2.2)^2 #matrix; first column is a^2, second column is b^2
distance.2 <- sqrt(apply(distance.temp.2, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
final.distance <- distance.1 - distance.2
voter.position <- data.frame(voter.position)
voter.position$final.distance <- final.distance
voter.position$affiliation <- ifelse(final.distance > 0, "2", "1")
#create affiliation variable. Coded as "2" if voter is closer to party 2, and "1" otherwise
outcome$voter.position.data <- voter.position
outcome$party.positions <- party.position
return(outcome)
}
####Problem 4: Visualizing the Affiliations####
visualizing <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
first.draw <- affiliation(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=c(min(c(first.draw$voter.position.data[,1], first.draw$party.position[,1])),
max(c(first.draw$voter.position.data[,1], first.draw$party.position[,1]))),
ylim=c(min(c(first.draw$voter.position.data[,2], first.draw$party.position[,2])),
max(c(first.draw$voter.position.data[,2], first.draw$party.position[,2]))))
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
return(first.draw)
}
visualizing(n=1000, option=1)
visualizing(n=1000, option=2)
visualizing(n=1000, option=3)
visualizing(n=1000, option=4)
visualizing(n=1000, option=5)
# Subsequent code for ggplot. I didn't end up using ggplot(), but let me know if you want me to go back
#and use ggplot for any reason. I'm just gonna comment it for now in case we want to go back and include it.
# library(ggplot2)
# plot1 <- ggplot(first.draw$voter.position.data, aes(x=X1, y=X2, colour=affiliation)) + geom_point()
# plot1 <- plot1 + geom_point(aes(x=party.position[1,1], y=party.position[1,2], colour="party1")) # Party 1
# plot1 <- plot1 + geom_point(aes(x=party.position[2,1], y=party.position[2,2], colour="party2")) # Party 2
# plot1
####Problem 5####
#affiliation2 function is just like affiliation function above, except the user can specify as arguments the positions taken by party 1 and party 2.
#These arguments should each be vectors of length 2.
affiliation2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2){
outcome <- vector("list")
#Generate the voters' and parties' positions
voter.position <-  voters(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)  #run the voters function from Problems 1-2 above to generate some random initial voter preferences
party.position <- rbind(party.1, party.2)
#Calculate a vector showing each individual's total distance from party 1; call it distance.1
distance.temp.1.1 <- voter.position[,1] - party.1[1]
distance.temp.1.2 <- voter.position[,2] - party.1[2]
distance.temp.1 <- cbind(distance.temp.1.1, distance.temp.1.2)^2 #matrix; first column is a^2, second column is b^2
distance.1 <- sqrt(apply(distance.temp.1, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
#Next calculate a vector showing each individual's total distance from party 2; call it distance.2
distance.temp.2.1 <- voter.position[,1] - party.2[1]
distance.temp.2.2 <- voter.position[,2] - party.2[2]
distance.temp.2 <- cbind(distance.temp.2.1, distance.temp.2.2)^2 #matrix; first column is a^2, second column is b^2
distance.2 <- sqrt(apply(distance.temp.2, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
final.distance <- distance.1 - distance.2
voter.position <- data.frame(voter.position)
voter.position$final.distance <- final.distance
voter.position$affiliation <- ifelse(final.distance > 0, "2", "1")
#create affiliation variable. Coded as "2" if voter is closer to party 2, and "1" otherwise
outcome$voter.position.data <- voter.position
outcome$party.positions <- party.position
return(outcome)
}
#Likewise the visualizing2 function is the same as visualizing except it can also take user-defined arguments for the positions taken by the parties;
#it uses these user-defined positions in the affiliation2 function defined above.
visualizing2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2){
first.draw <- affiliation2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1, party.2=party.2)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=c(min(c(first.draw$voter.position.data[,1], first.draw$party.position[,1])),
max(c(first.draw$voter.position.data[,1], first.draw$party.position[,1]))),
ylim=c(min(c(first.draw$voter.position.data[,2], first.draw$party.position[,2])),
max(c(first.draw$voter.position.data[,2], first.draw$party.position[,2]))))
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
return(first.draw)
}
master <- function(sims=10, n=1000, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
draw <- visualizing(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
for(i in 2:sims){
party.1.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),2]))
party.2.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),2]))
draw <- visualizing2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1.new, party.2=party.2.new)
}
}
windows(record=TRUE)
master()
windows(record=TRUE, resize="fixed")
windows(record=TRUE, rescale="fixed")
master()
visualizing2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2, xlimit, ylimit){
first.draw <- affiliation2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1, party.2=party.2)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=xlimit, ylim=ylimit)
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
return(first.draw)
}
master <- function(sims=10, n=1000, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
draw <- visualizing(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
xlimit <- c(min(c(draw$voter.position.data[,1], draw$party.position[,1])),
max(c(draw$voter.position.data[,1], draw$party.position[,1])))
ylimit <- c(min(c(draw$voter.position.data[,2], draw$party.position[,2])),
max(c(draw$voter.position.data[,2], draw$party.position[,2])))
for(i in 2:sims){
party.1.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),2]))
party.2.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),2]))
draw <- visualizing2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1.new,
party.2=party.2.new, xlimit=xlimit, ylimit=ylimit)
}
}
voters <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
if (option==1){
voter <- matrix(rnorm(n*2), nrow=n, ncol=2)
return(voter)
}
if (option==2){
voter <- matrix(c(rnorm(n, mean=0, sd=sig1), rnorm(n, mean=0, sd=sig2)),
nrow=n, ncol=2)
return(voter)
}
if (option==3){
voter <- matrix(runif(n*2), nrow=n, ncol=2)
return(voter)
}
if (option==4){
voter <- matrix(mvrnorm(n, mu=c(0,0), Sigma=Sigma),nrow=n, ncol=2)
return(voter)
}
if (option==5){
mvr.1 <- mvrnorm(n, mu=c(0,0), Sigma=Sigma)
mvr.2 <- mvrnorm(n, mu=runif(2), Sigma=Sigma+runif(1))
mvr.3 <- mvrnorm(n, mu=runif(2), Sigma=Sigma+runif(1))
total <- rbind(mvr.1, mvr.2, mvr.3)
voter <- total[sample(1:(3*n), size=n),]
return(voter)
}
}
####Problem 3: Function such that voters affiliate with the closest of the two parties####
#The affiliation function takes the same arguments as the voters function above; thus when running affiliation, you can
#decide which kind of distribution will be used to generate voter preferences, etc.
affiliation <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
outcome <- vector("list")
#Generate the voters' and parties' positions
voter.position <-  voters(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)  #run the voters function from Problems 1-2 above to generate some random initial voter preferences
party.1 <- rnorm(2) #the original positions taken by Party 1 on two dimensions
party.2 <- rnorm(2) #the original positions taken by Party 2 on two dimensions
party.position <- rbind(party.1, party.2)
#Calculate a vector showing each individual's total distance from party 1; call it distance.1
distance.temp.1.1 <- voter.position[,1] - party.1[1]
distance.temp.1.2 <- voter.position[,2] - party.1[2]
distance.temp.1 <- cbind(distance.temp.1.1, distance.temp.1.2)^2 #matrix; first column is a^2, second column is b^2
distance.1 <- sqrt(apply(distance.temp.1, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
#Next calculate a vector showing each individual's total distance from party 2; call it distance.2
distance.temp.2.1 <- voter.position[,1] - party.2[1]
distance.temp.2.2 <- voter.position[,2] - party.2[2]
distance.temp.2 <- cbind(distance.temp.2.1, distance.temp.2.2)^2 #matrix; first column is a^2, second column is b^2
distance.2 <- sqrt(apply(distance.temp.2, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
final.distance <- distance.1 - distance.2
voter.position <- data.frame(voter.position)
voter.position$final.distance <- final.distance
voter.position$affiliation <- ifelse(final.distance > 0, "2", "1")
#create affiliation variable. Coded as "2" if voter is closer to party 2, and "1" otherwise
outcome$voter.position.data <- voter.position
outcome$party.positions <- party.position
return(outcome)
}
####Problem 4: Visualizing the Affiliations####
visualizing <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
first.draw <- affiliation(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=c(min(c(first.draw$voter.position.data[,1], first.draw$party.position[,1])),
max(c(first.draw$voter.position.data[,1], first.draw$party.position[,1]))),
ylim=c(min(c(first.draw$voter.position.data[,2], first.draw$party.position[,2])),
max(c(first.draw$voter.position.data[,2], first.draw$party.position[,2]))))
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
return(first.draw)
}
visualizing(n=1000, option=1)
visualizing(n=1000, option=2)
visualizing(n=1000, option=3)
visualizing(n=1000, option=4)
visualizing(n=1000, option=5)
# Subsequent code for ggplot. I didn't end up using ggplot(), but let me know if you want me to go back
#and use ggplot for any reason. I'm just gonna comment it for now in case we want to go back and include it.
# library(ggplot2)
# plot1 <- ggplot(first.draw$voter.position.data, aes(x=X1, y=X2, colour=affiliation)) + geom_point()
# plot1 <- plot1 + geom_point(aes(x=party.position[1,1], y=party.position[1,2], colour="party1")) # Party 1
# plot1 <- plot1 + geom_point(aes(x=party.position[2,1], y=party.position[2,2], colour="party2")) # Party 2
# plot1
####Problem 5####
#affiliation2 function is just like affiliation function above, except the user can specify as arguments the positions taken by party 1 and party 2.
#These arguments should each be vectors of length 2.
affiliation2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2){
outcome <- vector("list")
#Generate the voters' and parties' positions
voter.position <-  voters(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)  #run the voters function from Problems 1-2 above to generate some random initial voter preferences
party.position <- rbind(party.1, party.2)
#Calculate a vector showing each individual's total distance from party 1; call it distance.1
distance.temp.1.1 <- voter.position[,1] - party.1[1]
distance.temp.1.2 <- voter.position[,2] - party.1[2]
distance.temp.1 <- cbind(distance.temp.1.1, distance.temp.1.2)^2 #matrix; first column is a^2, second column is b^2
distance.1 <- sqrt(apply(distance.temp.1, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
#Next calculate a vector showing each individual's total distance from party 2; call it distance.2
distance.temp.2.1 <- voter.position[,1] - party.2[1]
distance.temp.2.2 <- voter.position[,2] - party.2[2]
distance.temp.2 <- cbind(distance.temp.2.1, distance.temp.2.2)^2 #matrix; first column is a^2, second column is b^2
distance.2 <- sqrt(apply(distance.temp.2, 1, sum)) #Pythagorean Theorem: c=sqrt(a^2 + b^2)
final.distance <- distance.1 - distance.2
voter.position <- data.frame(voter.position)
voter.position$final.distance <- final.distance
voter.position$affiliation <- ifelse(final.distance > 0, "2", "1")
#create affiliation variable. Coded as "2" if voter is closer to party 2, and "1" otherwise
outcome$voter.position.data <- voter.position
outcome$party.positions <- party.position
return(outcome)
}
#Likewise the visualizing2 function is the same as visualizing except it can also take user-defined arguments for the positions taken by the parties;
#it uses these user-defined positions in the affiliation2 function defined above. It also keeps the same x and y-axis limits so that one can more easily
#see how the data/parties are moving compared to previously. Again, xlimit and ylimit should be numeric vectors of length 2 where the first element of the vector
#is less than the second element
visualizing2 <- function(n, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2), party.1, party.2, xlimit, ylimit){
first.draw <- affiliation2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1, party.2=party.2)
#First we plot only those observations who have an affiliation score of 1 (colored blue)
plot(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==1),2],
col="blue", pch=16, cex=0.25, xlab="First Dimension", ylab="Second Dimension",
xlim=xlimit, ylim=ylimit)
#Second we add the points with affiliation scores of 2 (colored red)
points(x=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),1],
y=first.draw$voter.position.data[which(first.draw$voter.position.data$affiliation==2),2],
col="red", pch=16, cex=0.25)
#Third we add the locations of the parties themselves, graphed as orange triangles
points(x=first.draw$party.position[,1], y=first.draw$party.position[,2], col=c("orange", "green"), pch=17)
legend(x="topright", legend=c("Vote for Party 1", "Vote for Party 2", "Party 1", "Party 2"),
pch=c(16, 16, 17, 17), col=c("blue", "red", "orange", "green"), cex=0.5)
return(first.draw)
}
master <- function(sims=10, n=1000, option=1, sig1=runif(1), sig2=runif(1), Sigma=matrix(c(10,3,3,2),2,2)){
draw <- visualizing(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma)
xlimit <- c(min(c(draw$voter.position.data[,1], draw$party.position[,1])),
max(c(draw$voter.position.data[,1], draw$party.position[,1])))
ylimit <- c(min(c(draw$voter.position.data[,2], draw$party.position[,2])),
max(c(draw$voter.position.data[,2], draw$party.position[,2])))
for(i in 2:sims){
party.1.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==1),2]))
party.2.new <- c(mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),1]),
mean(draw$voter.position.data[which(draw$voter.position.data$affiliation==2),2]))
draw <- visualizing2(n=n, option=option, sig1=sig1, sig2=sig2, Sigma=Sigma, party.1=party.1.new,
party.2=party.2.new, xlimit=xlimit, ylimit=ylimit)
}
}
windows(record=TRUE)
master()
